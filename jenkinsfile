pipeline {
    agent any
    options {
      ansiColor('xterm')
      timestamps()
      timeout(time: 1, unit: 'HOURS')
    }
    environment {
      ARTIFACTOR = "${env.BUILD_NUMBER}.zip"
      SLACK_MESSAGE = "Job '${env.JOB_NAME}' Build ${env.BUILD_NUMBER} URL ${env.BUILD_URL}"
    }
    parameters {
      string(name: 'SLACK_CHANNEL', defaultValue: '#deploys', description: '')
      choice(name: 'TYPE', choices: 'aut\ncron\ndata', description: 'Autoscaling, Cron or Data')
      booleanParam(name: 'DEPLOY', defaultValue: false, description: 'deploy to server  ')
    }



    stages {
        stage("Repository") {
            steps {
              //git url: "https://github.com/pynef/jenkins-pipeline.git"
              checkout scm
              sh "echo ${env.WORKSPACE}"
            }
        }
        stage("Build") {
            steps {
              echo "build"
              sh "echo ${env.BUILD_NUMBER}"
              echo "agregando artefacto"
              sh "touch ${ARTIFACTOR}"
              script {
                 def ID = sh(returnStdout: true, script: "./ami_id.sh").trim()
                 sh "./build_ami.sh ${ID}"
             }
            }
        }
        stage("Test") {
            steps {
              parallel (
                  syntax: { sh "echo syntax" },
                  grep: { sh "echo 'grep'" }
              )
            }
        }
        stage("QA") {
            steps {
              sh "echo deploy"
              sh "echo ${env.JOB_NAME}"
              sh "echo ${env.ARTIFACTOR}"
              sh "echo ${env.SLACK_MESSAGE}"
              archiveArtifacts artifacts: "${ARTIFACTOR}", onlyIfSuccessful: true
            }
        }
        stage ('Apply') {
            input {
              message "Are you sure?"
              ok "Yes"
            }
            steps {
              sh "./ami_id.sh"
            }
        }
        stage("Deploy") {
           when {
               expression {
                 return params.DEPLOY ==~ /(?i)(Y|YES|T|TRUE|ON|RUN)/
               }
           }
           steps {
             build job: "another_job", parameters: [
                [$class: 'StringParameterValue', name: 'SLACK_CHANNEL', value: "monitoring"],
                [$class: 'StringParameterValue', name: 'TYPE', value: 'cron']
              ]
           }
         }
    }
    post {
      always {
        archiveArtifacts artifacts: "${ARTIFACTOR}", onlyIfSuccessful: true
        sh "rm -f ${ARTIFACTOR}"
        echo "Job has finished"
      }
    }
}
